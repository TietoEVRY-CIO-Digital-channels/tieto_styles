// All base variables, mixins and functions needed by Tieto Styles.
@import '../base/index';
@import 'node_modules/foundation-sites/scss/components/button';

////
/// @group button
////

/// Font family for button elements.
/// @type Font
$button-font-family: inherit !default;

/// Padding inside buttons.
/// @type List
$button-padding: 15px;

/// Margin around buttons.
/// @type List
$button-margin: 0 0 $global-margin 0 !default;

/// Default fill for buttons. Can either be `solid` or `hollow`.
/// @type Keyword
$button-fill: solid !default;

/// Default background color for buttons.
/// @type Color
$button-background: #3399CC;

/// Background color on hover for buttons.
/// @type Color
//$button-background-hover: map-get($tsg-grayscale, 'bahama-blue'); // Overridden anyway with our own mixin.

/// Font color for buttons.
/// @type List
$button-color: map-get($tsg-grayscale, 'white');

/// Alternative font color for buttons.
/// @type List
$button-color-alt: map-get($tsg-grayscale, 'mine-shaft');

/// Border radius for buttons, defaulted to global-radius.
/// @type Number
$button-radius: $global-radius;

/// Border width for hollow outline buttons
/// @type Number
$button-hollow-border-width: 1px;

/// Sizes for buttons.
/// @type Map
$button-sizes: (
    tiny: 9.5px,
    small: 11px,
    default: 12px,
    large: 13px,
);

/// Coloring classes. A map of classes to output in your CSS, like `.secondary`, `.success`, and so on.
/// @type Map
$button-palette: (
    primary: $button-background,
    secondary: #e5e5e5,
    success: #28A834,
    warning: map-get($tsg-colors, 'cornflower'),
    alert: #DD3A76,
    hollowx: #D2D2D2,
    ghost: #D2D2D2,
    outline: #FFFFFF,
);

/// opacity for a disabled button.
/// @type List
$button-opacity-disabled: 0.65;

/// Background color lightness on hover for buttons.
/// @type Number
$button-background-hover-lightness: -20% !default;

/// Color lightness on hover for hollow buttons.
/// @type Number
$button-hollow-hover-lightness: -50% !default;

// Internal: flip from margin-right to margin-left for defaults
@if $global-text-direction == 'rtl' {
  $button-margin: 0 0 $global-margin $global-margin !default;
}

/// transitions for buttons.
/// @type List
$button-transition: all 0.3s ease 0s;

/// Additional responsive classes for .expanded
/// @type Boolean
$button-responsive-expanded: false !default;

// Min-width for default buttons.
$tsg-button-min-width: 170px;

// Background color on hover for buttons.
$tsg-button-palette--hover: (
    primary: #286090,
    secondary: #F1F1F1,
    success: #00833E,
    warning: map-get($tsg-colors, 'tenn'),
    alert: #D51067,
    hollow:#3399CC,
    ghost: #3399CC,
    outline: #3399CC,
);

// Size and padding adjustments for different sizes of buttons.
$tsg-button-sizes: (
    tiny: (
        'min-width': 100px,
        'padding': 7px 15px,
    ),
    small: (
        'min-width': 150px,
        'padding': 9px 0,
    ),
    large: (
        'min-width': 200px,
        'padding': 19px,
    ),
);

$tsg-button__text-transform: uppercase;
$tsg-button__letter-spacing: -0.002em;
$tsg-button__font-weight: 500; // @todo This should be assigned to an existing more generic typography related variable.
$tsg-button__shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.16), 0 2px 10px 0 rgba(0, 0, 0, 0.12);
$tsg-button__radius--round: 100px;

// Apply additional changes to affect button sizes.
@mixin tsg-button-size {
  min-width: $tsg-button-min-width;

  @each $size, $styles in $tsg-button-sizes {
    &.#{$size} {
      @include tsg-apply-styles($styles);
    }
  }
}

// Set the background color of each kind of button on hover.
@mixin tsg-button-color {
  @each $key, $color in $tsg-button-palette--hover {
    &.#{$key}:not(.hollow) {
      @include tsg-hover-styles {
        background-color: $color;

        &.ghost,
        &.outline { // @todo Ghost and Outline styles should be in their own mixin.
          color: map-get($tsg-grayscale, 'white');
        }
      }
    }
  }
}

// Applies background and border colors for Tieto hollow-type buttons that differ from Foundation hollow buttons.
@mixin tsg-button-hollow($background: map-get($tsg-button-palette--hover(primary)), $border: map-get($button-palette, ghost)) {
  background-color: $background;
  border-color: $border;

  &:hover {
    border-color: transparent; // @todo if the button height is lacking 2px, this can be changed to match the $border color.
  }
}

// Tieto buttons.
@mixin tsg-button {
  // Buttons are built on Foundation and will not work without this.
  @include foundation-button;

  .button {
    @include tsg-button-size;
    @include tsg-button-color;

    &.ghost {
      @include tsg-button-hollow(transparent);
    }

    &.outline {
      @include tsg-button-hollow(map-get($tsg-grayscale, 'white'));
    }

    text-transform: $tsg-button__text-transform;
    letter-spacing: $tsg-button__letter-spacing;
    font-weight: $tsg-button__font-weight;
    text-rendering: $tsg-text-rendering;

    &.shadow:not(:hover) {
      box-shadow: $tsg-button__shadow;
    }

    &.round {
      border-radius: $tsg-button__radius--round;
    }
  }
}
