// Colors
//
// This section contains various Tieto colors.



// Variable maps of Tieto colors.
$tsg-colors: (
  // Primary colour
    'picton-blue': #62B3E5,
  // Blue in user interfaces
    'curious-blue': #2C89C3,
  // Supporting colours
    'deep-blush': #E56385,
    'apple': #6CC04A,
    'cornflower': #F78D2D,
  // Secondary colours
    'cornflower-1': #9ACAEB,
    'bahama-blue': #0065A0,
    'azalea': #F0B3CA,
    'razzmatazz': #D51067,
    'yellow-green': #BDE093,
    'fun-green': #00833E,
    'macaroni-and-cheese': #FFBE85,
    'tenn': #D75F00,
);

// Greyscale colours
$tsg-grayscale: (
    'white': #fff,
    'alabaster': #F8F8F8,
    'iron': #EEEFF0,
    'mercury': #E5E3E3,
    'alto': #D2D2D2,
    'silver': #C1C1C1,
    'silver-chalice': #999,
    'boulder': #7B7B7B,
    'dove-grey': #5E5E5E,
    'mine-shaft': #333,
    'black': #000,
);

// @todo Check how Foundation did foundation-colors.
// Document how to use map-get so ppl can use variables. Remove these single variables? Or have single variables use map-get to refer to main variable.
//$white: #fff;
//$black: #000;
//
//// Primary colour
//$tsg-picton-blue: #62B3E5;
//
//// Blue in user interfaces
//$tsg-curious-blue: #2C89C3;
//
//// Supporting colours
//$tsg-deep-blush: #E56385;
//$tsg-apple: #6CC04A;
//$tsg-cornflower: #F78D2D;
//
//// Secondary colours
//$tsg-cornflower-1: #9ACAEB;
//$tsg-bahama-blue: #0065A0;
//$tsg-azalea: #F0B3CA;
//$tsg-razzmatazz: #D51067;
//$tsg-yellow-green: #BDE093;
//$tsg-fun-green: #00833E;
//$tsg-macaroni-and-cheese: #FFBE85;
//$tsg-tenn: #D75F00;
//
//// Greyscale colours
//$tsg-alabaster: #F8F8F8;
//$tsg-iron: #EEEFF0;
//$tsg-mercury: #E5E3E3;
//$tsg-alto: #D2D2D2;
//$tsg-silver: #C1C1C1;
//$tsg-silver-chalice: #999;
//$tsg-boulder: #7B7B7B;
//$tsg-dove-grey: #5E5E5E;
//$tsg-mine-shaft: #333;

/// Transfers the colors in the `$foundation-palette` map into variables, such as `$primary-color` and `$secondary-color`. Call this mixin below the Global section of your settings file to properly migrate your codebase.
//@mixin add-foundation-colors() {
//  @if map-has-key($foundation-palette, primary) {
//    $primary-color: map-get($foundation-palette, primary) !global;
//  } @else {
//    $primary-color: #1779ba !global;
//  }
//  @if map-has-key($foundation-palette, secondary) {
//    $secondary-color: map-get($foundation-palette, secondary) !global;
//  } @else {
//    $secondary-color: #767676 !global;
//  }
//  @if map-has-key($foundation-palette, success) {
//    $success-color: map-get($foundation-palette, success) !global;
//  } @else {
//    $success-color: #3adb76 !global;
//  }
//  @if map-has-key($foundation-palette, warning) {
//    $warning-color: map-get($foundation-palette, warning) !global;
//  } @else {
//    $warning-color: #ffae00 !global;
//  }
//  @if map-has-key($foundation-palette, alert) {
//    $alert-color: map-get($foundation-palette, alert) !global;
//  } @else {
//    $alert-color: #cc4b37 !global;
//  }
//}

// end todo.

@function tsg-get-color($color) {
  @if $color = map-get($tsg-colors($color)) {
    @return $color;
  }
  @else if $color = map-get($tsg-grayscale($color)) {
    @return $color;
  }
  @else {
    @warn $color + ' is not a valid Tieto branding color.';
  }
}

@mixin tsg-iterate-colors($color-map) {
  @each $name, $color in $color-map {
    .color--#{$name} {
      color: $color;
    }

    .#{$name},
    .background--#{$name} {
      background-color: $color;
    }
  }
}

@mixin tsg-color {
  @include tsg-iterate-colors($tsg-colors);
  @include tsg-iterate-colors($tsg-grayscale);
}
