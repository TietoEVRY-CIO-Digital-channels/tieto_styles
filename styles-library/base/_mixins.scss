// @todo This could be moved to a helper file but at the moment is only used by pseudo-el() mixin.
%pseudos {
  content: '';
  position: absolute;
}

// Pseudo :before / :after helper misin.
// @param {Element} $el [ before] - Pseudo element, either `before` or `after`.
// @param {Width} $el-width [0] - Element width.
// @param {Height} $el-height [0] - Element height.
@mixin pseuso-el($el: before, $el-width: 0, $el-height: 0) {
  @if $el == "before" or $el == "after" {
    &:#{$el} {
      @extend %pseudos;
      width: $el-width;
      height: $el-height;
      @content;
    }
  }
  @else {
    @warn "`#{$el}` is not a valid pseudo-element.";
  }
}

// @todo Should be removed when Foundation or other clearfix is in place.
// Clearfix
@mixin clearfix {
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}

@mixin iterate-map($map) {
  @each $key, $value in $map {
    &.#{$key} {
      //@content;

      // @todo Go figure. Do something with this. What parameters to make this useful and versatile?
      background-color: $value;
    }
  }
}

// Yoinked - http://compass-style.org/reference/compass/typography/links/link_colors/
// Required order of link states: Link, Visited, Hover, Focus, Active.
@mixin tsg-link-colors($normal, $hover: false, $active: false, $visited: false, $focus: false) {
  color: $normal;

  @if $visited {
    &:visited {
      color: $visited;
    }

  }
  @if $focus {
    &:focus {
      color: $focus;
    }
  }

  @if $hover {
    &:hover {
      color: $hover;
    }
  }

  @if $active {
    &:active {
      color: $active;
    }
  }
}

// Iterate over a map with keys being CSS properties and apply styles based on the values.
@mixin tsg-apply-styles($styles) {
  @each $property, $style in $styles {
    #{$property}: #{$style};
  }
}

// Simply apply styles to :hover, :focus and :active.
@mixin tsg-hover-styles {
  &:hover,
  &:focus,
  &:active {
    @content;
  }
}
