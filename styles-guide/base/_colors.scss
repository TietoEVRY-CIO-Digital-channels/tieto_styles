@import '../../styles-library/base/colors';

// Colors
//
// todo Description.
//
// Styleguide 1.0

.color {
  // Make the color swatches take some space.
  padding: $global-padding * 2;
}

// @todo Enable this later if needed after figuring out build configuration options.
// Applies only to the styleguide and only for the color section, which doesn't have a usable semantic name.
//[id^="section-1"] {
//  clear: both;
//
//  .sg.sg-section-partial:not(.sg-code-listing) {
//    width: 25%;
//    float: left;
//  }
//}

// Primary color
//
// Blue is Tieto's primary colours, and it should be the main colour in all our channels. Blue is combined with white or near to white colours to create a light and fresh appearance.
//
// .picton-blue - #8AE463
//
// markup: <div class="color {$modifiers}"></div>
//
// Styleguide 1.1

// Blue in user interfaces
//
// This blue can be used in user interfaces for better contrast and readability than the primary color.
//
// .curious-blue - #2C89C3, Blue in user interfaces
//
// markup: <div class="color {$modifiers}"></div>
//
// Styleguide 1.2

// Supporting colors
//
// The supporting colours can be used to support the main blue colour discreetly, to e.g. draw attention to buttons. When combining colors, please refer to provided examples and good visibility standards. Test the readability of texts with a contrast checker. Keep in mind different screens and different levels of eye sight of users.
//
// .deep-blush - #E56385
// .apple - #6CC04A
// .cornflower - #F78D2D
//
// markup: <div class="color {$modifiers}"></div>
//
// Styleguide 1.3

// Secondary colors
//
// Secondary colors are lighter and darker versions of the four main colours. Sometimes these colours are needed in user interfaces to improve readability or to make the look and feel calmer.
//
// .cornflower-1 - #9ACAEB
// .bahama-blue - #0065A0
// .azalea - #F0B3CA
// .razzmatazz - #D51067
// .yellow-green - #BDE093
// .fun-green - #00833E
// .macaroni-and-cheese - #FFBE85
// .tenn - #D75F00
//
// markup: <div class="color {$modifiers}"></div>
//
// Styleguide 1.4

// Grayscale
//
// Greyscale palette is used in many different cases from light background colours to bodytext colour #333333.
//
// .alabaster - #F8F8F8
// .iron - #EEEFF0
// .mercury - #E5E3E3
// .alto - #D2D2D2
// .silver - #C1C1C1
// .silver-chalice - #999999
// .boulder - #7B7B7B
// .dove-grey - #5E5E5E
// .mine-shaft - #333333
//
// markup: <div class="color {$modifiers}"></div>
//
// Styleguide 1.5

// Extras
//
// These are not officially part of Tieto branding colors, but the variables / classes are available and it is preferred to use these rather than directly assign colors.
//
// .white - #FFFFFF
// .black - #000000
//
// markup: <div class="color {$modifiers}"></div>
//
// Styleguide 1.6

@include tsg-color;

// Working with color maps
//
// `@mixin tsg-color()` - Generates classes like `.color--picton-blue`, `.background--picton-blue`, and `.picton-blue`.
//
// `.picton-blue` is the same as `.background--picton-blue`, although `.background--picton-blue` is the preferred naming standard.<br/>
// `.color--picton-blue` will apply the color to the `color` CSS property.
//
// The colors are stored in two variable maps, `$tsg-colors` and `$tsg-grayscale`. To get a single color from the map in SCSS, you can use the function `tsg-get-color('picton-blue')`, which will search both maps and return the hex value of the color name passed to the function.
//
// xStyleguide 1.7

// Sass Reference
//
// xStyleguide 1.4

// Variables
//
// <table class="tsg-variables-table">
// <thead>
// <tr>
// <th>Name</th>
// <th>Type</th>
// <th>Default value</th>
// <th>Description</th>
// </tr>
// </thead>
// <tbody>
// <tr>
// <td>`$tsg-colors`</td>
// <td>Map</td>
// <td>
// <pre>
// (
//   // Primary colour
//   'picton-blue': #62B3E5,
//   // Blue in user interfaces
//   'curious-blue': #2C89C3,
//   // Supporting colours
//   'deep-blush': #E56385,
//   'apple': #6CC04A,
//   'cornflower': #F78D2D,
//   // Secondary colours
//   'cornflower-1': #9ACAEB,
//   'bahama-blue': #0065A0,
//   'azalea': #F0B3CA,
//   'razzmatazz': #D51067,
//   'yellow-green': #BDE093,
//   'fun-green': #00833E,
//   'macaroni-and-cheese': #FFBE85,
//   'tenn': #D75F00,
// )
// </pre>
// </td>
// <td>Tieto branding colors and supporting colors.</td>
// </tr>
// <tr>
// <td>`$tsg-grayscale`</td>
// <td>Map</td>
// <td>
// <pre>
// (
//   'white': #fff,
//   'alabaster': #F8F8F8,
//   'iron': #EEEFF0,
//   'mercury': #E5E3E3,
//   'alto': #D2D2D2,
//   'silver': #C1C1C1,
//   'silver-chalice': #999,
//   'boulder': #7B7B7B,
//   'dove-grey': #5E5E5E,
//   'mine-shaft': #333,
//   'black': #000,
// )
// </pre>
// </td>
// <td>Tieto branding colors and supporting colors.</td>
// </tr>
// </tbody>
// </table>
//
// xStyleguide 1.4.1

// Mixins
//
// We use these mixins to build the final CSS output of this component. You can use the mixins yourself to build your own class structure out of our components.
//
// xStyleguide 1.4.2

// @todo 
// styleguide:ignore:start
//
// <h3>tsg-get-color</h3>
// <h4>tsg-get-color</h4>
// <code><pre>@include tsg-get-color($color)</pre></code>
// <pre><code>@include tsg-get-color($color)</code></pre>
// <div class="docs-code"><code>@include tsg-get-color($color)</code></div>
// Returns the hex value of the color name from either `$tsg-colors` or `$tsg-grayscale`.
// <table class="tsg-variables-table">
// <thead>
// <tr>
// <th>Parameter</th>
// <th>Type</th>
// <th>Default value</th>
// <th>Description</th>
// </tr>
// </thead>
// <tbody>
// <tr>
// <td>`$tsg-colors`</td>
// <td>Map</td>
// <td>
// <pre>
// </pre>
// </td>
// <td>Tieto branding colors and supporting colors.</td>
// </tr>
// <tr>
// <td>`$tsg-grayscale`</td>
// <td>Map</td>
// <td>
// <pre>
// </pre>
// </td>
// <td>Tieto branding colors and supporting colors.</td>
// </tr>
// </tbody>
// </table>
//
// styleguide:ignore:end
//

// Functions
//
// xStyleguide 1.4.3

@include add-foundation-colors;
